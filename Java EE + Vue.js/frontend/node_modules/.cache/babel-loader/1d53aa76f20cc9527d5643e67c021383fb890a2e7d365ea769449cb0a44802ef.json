{"ast":null,"code":"const API_URL = 'http://localhost:8080/backend/api/';\nexport const api = {\n  registerUser(userData) {\n    return fetch(`${API_URL}users/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(response => {\n      if (!response.ok) {\n        return response.json().then(errorData => {\n          const error = new Error(errorData.message || 'Failed to register user.');\n          error.response = {\n            status: response.status,\n            data: errorData\n          };\n          throw error;\n        });\n      }\n      return response.json();\n    });\n  },\n  loginUser(userData) {\n    return fetch(`${API_URL}users/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(response => {\n      if (!response.ok) {\n        return response.json().then(errorData => {\n          const error = new Error(errorData.message || 'Failed to log in.');\n          error.response = {\n            status: response.status,\n            data: errorData\n          };\n          throw error;\n        });\n      }\n      return response.json();\n    });\n  },\n  getPersonalPage() {\n    const authToken = localStorage.getItem('authToken');\n    return fetch(`${API_URL}users/personal`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    }).then(response => {\n      if (!response.ok) {\n        return response.json().then(errorData => {\n          const error = new Error(errorData.message || 'Failed to fetch personal page.');\n          error.response = {\n            status: response.status,\n            data: errorData\n          };\n          throw error;\n        });\n      }\n      return response.json();\n    });\n  },\n  submitPoint(pointData) {\n    const authToken = localStorage.getItem('authToken');\n    return fetch(`${API_URL}points/checkpoint`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${authToken}`\n      },\n      body: JSON.stringify(pointData)\n    }).then(response => {\n      if (!response.ok) {\n        return response.json().then(errorData => {\n          const error = new Error(errorData.message || 'Failed to submit point.');\n          error.response = {\n            status: response.status,\n            data: errorData\n          };\n          throw error;\n        });\n      }\n      return response.json();\n    });\n  },\n  getPoints(authToken) {\n    return fetch(`${API_URL}points`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    }).then(response => {\n      if (!response.ok) {\n        return response.json().then(errorData => {\n          const error = new Error(errorData.message || 'Failed to fetch point.');\n          error.response = {\n            status: response.status,\n            data: errorData\n          };\n          throw error;\n        });\n      }\n      return response.json();\n    });\n  },\n  clearPoints(authToken) {\n    return fetch(`${API_URL}points/clear`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    }).then(response => {\n      if (!response.ok) {\n        return response.json().then(errorData => {\n          const error = new Error(errorData.message || 'Failed to delete points.');\n          error.response = {\n            status: response.status,\n            data: errorData\n          };\n          throw error;\n        });\n      }\n      return response.status;\n    });\n  }\n};","map":{"version":3,"names":["API_URL","api","registerUser","userData","fetch","method","headers","body","JSON","stringify","then","response","ok","json","errorData","error","Error","message","status","data","loginUser","getPersonalPage","authToken","localStorage","getItem","Authorization","submitPoint","pointData","getPoints","clearPoints"],"sources":["/home/kamilla/IdeaProjects/web-lab-4/hello/src/api.js"],"sourcesContent":["const API_URL = 'http://localhost:8080/backend/api/';\n\nexport const api = {\n  registerUser(userData) {\n    return fetch(`${API_URL}users/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify(userData),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          return response.json().then((errorData) => {\n            const error = new Error(errorData.message || 'Failed to register user.');\n            error.response = { status: response.status, data: errorData };\n            throw error;\n          });\n        }\n        return response.json();\n      });\n  },\n  loginUser(userData) {\n    return fetch(`${API_URL}users/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify(userData),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          return response.json().then((errorData) => {\n            const error = new Error(errorData.message || 'Failed to log in.');\n            error.response = { status: response.status, data: errorData };\n            throw error;\n          });\n        }\n        return response.json();\n      });\n  },\n  getPersonalPage() {\n    const authToken = localStorage.getItem('authToken');\n    return fetch(`${API_URL}users/personal`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          return response.json().then((errorData) => {\n            const error = new Error(errorData.message || 'Failed to fetch personal page.');\n            error.response = { status: response.status, data: errorData };\n            throw error;\n          });\n        }\n        return response.json();\n      });\n  },\n  submitPoint(pointData) {\n    const authToken = localStorage.getItem('authToken');\n    return fetch(`${API_URL}points/checkpoint`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${authToken}`,\n      },\n      body: JSON.stringify(pointData),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          return response.json().then((errorData) => {\n            const error = new Error(errorData.message || 'Failed to submit point.');\n            error.response = { status: response.status, data: errorData };\n            throw error;\n          });\n        }\n        return response.json();\n      });\n  },\n  getPoints(authToken) {\n    return fetch(`${API_URL}points`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          return response.json().then((errorData) => {\n            const error = new Error(errorData.message || 'Failed to fetch point.');\n            error.response = { status: response.status, data: errorData };\n            throw error;\n          });\n        }\n        return response.json();\n      });\n  },\n  clearPoints(authToken) {\n  return fetch(`${API_URL}points/clear`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${authToken}`,\n    },\n  }).then((response) => {\n    if (!response.ok) {\n      return response.json().then((errorData) => {\n        const error = new Error(errorData.message || 'Failed to delete points.');\n        error.response = { status: response.status, data: errorData };\n        throw error;\n      });\n    }\n    return response.status;\n  });\n  },\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}