{"ast":null,"code":"import { api } from '../api';\nexport default {\n  name: 'RegistrationForm',\n  data() {\n    return {\n      isRegisterMode: true,\n      user: {\n        email: '',\n        password: '',\n        username: ''\n      },\n      errorMessage: ''\n    };\n  },\n  methods: {\n    async submitForm() {\n      try {\n        if (this.isRegisterMode) {\n          await api.registerUser(this.user);\n        }\n        const loginResponse = await api.loginUser({\n          email: this.user.email,\n          password: this.user.password\n        });\n        localStorage.setItem('authToken', loginResponse.token);\n        console.log(loginResponse.token, localStorage.getItem('authToken'));\n        this.$emit('user-logged-in', loginResponse.data);\n        this.resetForm();\n      } catch (error) {\n        if (error.response && error.response.status === 401) {\n          this.errorMessage = 'Invalid email or password. Please try again.';\n        } else {\n          this.errorMessage = 'An error occurred. Please try again later.';\n        }\n      }\n    },\n    resetForm() {\n      this.user.email = '';\n      this.user.password = '';\n      this.user.username = '';\n    },\n    toggleMode() {\n      this.isRegisterMode = !this.isRegisterMode;\n    }\n  }\n};","map":{"version":3,"names":["api","name","data","isRegisterMode","user","email","password","username","errorMessage","methods","submitForm","registerUser","loginResponse","loginUser","localStorage","setItem","token","console","log","getItem","$emit","resetForm","error","response","status","toggleMode"],"sources":["/home/kamilla/IdeaProjects/web-lab-4/hello/src/components/RegistrationForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"container registration-form\">\r\n    <h2 v-if=\"isRegisterMode\">Register</h2>\r\n    <h2 v-else>Login</h2>\r\n    <form @submit.prevent=\"submitForm\" class=\"form-container\">\r\n      <div>\r\n        <input\r\n            type=\"email\"\r\n            v-model=\"user.email\"\r\n            placeholder=\"Email\"\r\n            required\r\n        />\r\n      </div>\r\n      <div>\r\n        <input\r\n            type=\"password\"\r\n            v-model=\"user.password\"\r\n            placeholder=\"Password\"\r\n            required\r\n        />\r\n      </div>\r\n      <div v-if=\"isRegisterMode\">\r\n        <input\r\n            type=\"text\"\r\n            v-model=\"user.username\"\r\n            placeholder=\"Username\"\r\n            required\r\n        />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">{{ isRegisterMode ? 'Register' : 'Login' }}</button>\r\n      </div>\r\n    </form>\r\n    <div v-if=\"errorMessage\" class=\"error\">{{ errorMessage }}</div>\r\n    <div>\r\n      <button @click=\"toggleMode\">\r\n        {{ isRegisterMode ? 'Already have an account? Login' : \"Don't have an account? Register\" }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { api } from '../api';\r\n\r\nexport default {\r\n  name: 'RegistrationForm',\r\n  data() {\r\n    return {\r\n      isRegisterMode: true,\r\n      user: {\r\n        email: '',\r\n        password: '',\r\n        username: '',\r\n      },\r\n      errorMessage: '',\r\n    };\r\n  },\r\n  methods: {\r\n    async submitForm() {\r\n      try {\r\n        if (this.isRegisterMode) {\r\n          await api.registerUser(this.user);\r\n        }\r\n\r\n        const loginResponse = await api.loginUser({\r\n          email: this.user.email,\r\n          password: this.user.password,\r\n        });\r\n\r\n        localStorage.setItem('authToken', loginResponse.token);\r\n        console.log(loginResponse.token, localStorage.getItem('authToken'));\r\n\r\n        this.$emit('user-logged-in', loginResponse.data);\r\n\r\n        this.resetForm();\r\n      } catch (error) {\r\n        if (error.response && error.response.status === 401) {\r\n          this.errorMessage = 'Invalid email or password. Please try again.';\r\n        } else {\r\n          this.errorMessage = 'An error occurred. Please try again later.';\r\n        }\r\n      }\r\n    },\r\n    resetForm() {\r\n      this.user.email = '';\r\n      this.user.password = '';\r\n      this.user.username = '';\r\n    },\r\n    toggleMode() {\r\n      this.isRegisterMode = !this.isRegisterMode;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style src=\"../assets/style/screenSize.css\"></style>\r\n<style scoped>\r\n.registration-form {\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n}\r\n\r\ninput {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin: 10px 0;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #28a745;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #218838;\r\n}\r\n\r\n.error {\r\n  color: red;\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":"AA2CA,SAASA,GAAE,QAAS,QAAQ;AAE5B,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,IAAI;MACpBC,IAAI,EAAE;QACJC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE;MACZ,CAAC;MACDC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,IAAI,IAAI,CAACP,cAAc,EAAE;UACvB,MAAMH,GAAG,CAACW,YAAY,CAAC,IAAI,CAACP,IAAI,CAAC;QACnC;QAEA,MAAMQ,aAAY,GAAI,MAAMZ,GAAG,CAACa,SAAS,CAAC;UACxCR,KAAK,EAAE,IAAI,CAACD,IAAI,CAACC,KAAK;UACtBC,QAAQ,EAAE,IAAI,CAACF,IAAI,CAACE;QACtB,CAAC,CAAC;QAEFQ,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEH,aAAa,CAACI,KAAK,CAAC;QACtDC,OAAO,CAACC,GAAG,CAACN,aAAa,CAACI,KAAK,EAAEF,YAAY,CAACK,OAAO,CAAC,WAAW,CAAC,CAAC;QAEnE,IAAI,CAACC,KAAK,CAAC,gBAAgB,EAAER,aAAa,CAACV,IAAI,CAAC;QAEhD,IAAI,CAACmB,SAAS,CAAC,CAAC;MAClB,EAAE,OAAOC,KAAK,EAAE;QACd,IAAIA,KAAK,CAACC,QAAO,IAAKD,KAAK,CAACC,QAAQ,CAACC,MAAK,KAAM,GAAG,EAAE;UACnD,IAAI,CAAChB,YAAW,GAAI,8CAA8C;QACpE,OAAO;UACL,IAAI,CAACA,YAAW,GAAI,4CAA4C;QAClE;MACF;IACF,CAAC;IACDa,SAASA,CAAA,EAAG;MACV,IAAI,CAACjB,IAAI,CAACC,KAAI,GAAI,EAAE;MACpB,IAAI,CAACD,IAAI,CAACE,QAAO,GAAI,EAAE;MACvB,IAAI,CAACF,IAAI,CAACG,QAAO,GAAI,EAAE;IACzB,CAAC;IACDkB,UAAUA,CAAA,EAAG;MACX,IAAI,CAACtB,cAAa,GAAI,CAAC,IAAI,CAACA,cAAc;IAC5C;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}